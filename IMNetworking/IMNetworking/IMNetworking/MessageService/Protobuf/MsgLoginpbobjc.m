// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_login.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "MsgLoginpbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MsgLoginRoot

@implementation MsgLoginRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MsgLoginRoot_FileDescriptor

static GPBFileDescriptor *MsgLoginRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - LoginRequestMsg

@implementation LoginRequestMsg

@dynamic hasPassWord, passWord;
@dynamic hasUserName, userName;
@dynamic hasApnsToken, apnsToken;
@dynamic hasExtType, extType;
@dynamic hasExtLength, extLength;

typedef struct LoginRequestMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t extLength;
  NSString *passWord;
  NSString *userName;
  NSString *apnsToken;
  int64_t extType;
} LoginRequestMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "passWord",
        .dataTypeSpecific.className = NULL,
        .number = LoginRequestMsg_FieldNumber_PassWord,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LoginRequestMsg__storage_, passWord),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = LoginRequestMsg_FieldNumber_UserName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LoginRequestMsg__storage_, userName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "apnsToken",
        .dataTypeSpecific.className = NULL,
        .number = LoginRequestMsg_FieldNumber_ApnsToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LoginRequestMsg__storage_, apnsToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extType",
        .dataTypeSpecific.className = NULL,
        .number = LoginRequestMsg_FieldNumber_ExtType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LoginRequestMsg__storage_, extType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "extLength",
        .dataTypeSpecific.className = NULL,
        .number = LoginRequestMsg_FieldNumber_ExtLength,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LoginRequestMsg__storage_, extLength),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LoginRequestMsg class]
                                     rootClass:[MsgLoginRoot class]
                                          file:MsgLoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LoginRequestMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\010\000\002\010\000\003\t\000\004\007\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LoginResponseMsg

@implementation LoginResponseMsg

@dynamic hasToken, token;
@dynamic hasUid, uid;
@dynamic hasLastMsgId, lastMsgId;

typedef struct LoginResponseMsg__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
  NSString *lastMsgId;
  int64_t uid;
} LoginResponseMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = LoginResponseMsg_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LoginResponseMsg__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = LoginResponseMsg_FieldNumber_Uid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LoginResponseMsg__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lastMsgId",
        .dataTypeSpecific.className = NULL,
        .number = LoginResponseMsg_FieldNumber_LastMsgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LoginResponseMsg__storage_, lastMsgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LoginResponseMsg class]
                                     rootClass:[MsgLoginRoot class]
                                          file:MsgLoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LoginResponseMsg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\010A\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
