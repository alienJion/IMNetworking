// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_header.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "MsgHeaderpbobjc.h"

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MsgHeaderRoot

@implementation MsgHeaderRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MsgHeaderRoot_FileDescriptor

static GPBFileDescriptor *MsgHeaderRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Header

@implementation Header

@dynamic hasMsgType, msgType;
@dynamic hasSseq, sseq;
@dynamic hasProtocolVersion, protocolVersion;
@dynamic hasClientType, clientType;
@dynamic hasAppKey, appKey;
@dynamic hasBodyLength, bodyLength;
@dynamic hasTime, time;
@dynamic hasDeviceId, deviceId;
@dynamic hasToken, token;
@dynamic hasMsgId, msgId;
@dynamic hasStatusCode, statusCode;
@dynamic hasDes, des;
@dynamic hasChatMsgType, chatMsgType;
@dynamic hasExtType, extType;

typedef struct Header__storage_ {
  uint32_t _has_storage_[1];
  int32_t msgType;
  int32_t protocolVersion;
  Header_ClientType clientType;
  int32_t bodyLength;
  int32_t statusCode;
  Header_ChatMsgType chatMsgType;
  NSString *appKey;
  NSString *deviceId;
  NSString *token;
  NSString *msgId;
  NSString *des;
  int64_t sseq;
  int64_t time;
  int64_t extType;
} Header__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueInt32 = 0,
        .core.name = "msgType",
        .core.dataTypeSpecific.className = NULL,
        .core.number = Header_FieldNumber_MsgType,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(Header__storage_, msgType),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeInt32,
      },
      {
        .defaultValue.valueInt64 = 0LL,
        .core.name = "sseq",
        .core.dataTypeSpecific.className = NULL,
        .core.number = Header_FieldNumber_Sseq,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(Header__storage_, sseq),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeInt64,
      },
      {
        .defaultValue.valueInt32 = 0,
        .core.name = "protocolVersion",
        .core.dataTypeSpecific.className = NULL,
        .core.number = Header_FieldNumber_ProtocolVersion,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(Header__storage_, protocolVersion),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeInt32,
      },
      {
        .defaultValue.valueEnum = Header_ClientType_Android,
        .core.name = "clientType",
        .core.dataTypeSpecific.enumDescFunc = Header_ClientType_EnumDescriptor,
        .core.number = Header_FieldNumber_ClientType,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(Header__storage_, clientType),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "appKey",
        .core.dataTypeSpecific.className = NULL,
        .core.number = Header_FieldNumber_AppKey,
        .core.hasIndex = 4,
        .core.offset = (uint32_t)offsetof(Header__storage_, appKey),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueInt32 = 0,
        .core.name = "bodyLength",
        .core.dataTypeSpecific.className = NULL,
        .core.number = Header_FieldNumber_BodyLength,
        .core.hasIndex = 5,
        .core.offset = (uint32_t)offsetof(Header__storage_, bodyLength),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeInt32,
      },
      {
        .defaultValue.valueInt64 = 0LL,
        .core.name = "time",
        .core.dataTypeSpecific.className = NULL,
        .core.number = Header_FieldNumber_Time,
        .core.hasIndex = 6,
        .core.offset = (uint32_t)offsetof(Header__storage_, time),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeInt64,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "deviceId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = Header_FieldNumber_DeviceId,
        .core.hasIndex = 7,
        .core.offset = (uint32_t)offsetof(Header__storage_, deviceId),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "token",
        .core.dataTypeSpecific.className = NULL,
        .core.number = Header_FieldNumber_Token,
        .core.hasIndex = 8,
        .core.offset = (uint32_t)offsetof(Header__storage_, token),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "msgId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = Header_FieldNumber_MsgId,
        .core.hasIndex = 9,
        .core.offset = (uint32_t)offsetof(Header__storage_, msgId),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueInt32 = 1,
        .core.name = "statusCode",
        .core.dataTypeSpecific.className = NULL,
        .core.number = Header_FieldNumber_StatusCode,
        .core.hasIndex = 10,
        .core.offset = (uint32_t)offsetof(Header__storage_, statusCode),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasDefaultValue | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeInt32,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "des",
        .core.dataTypeSpecific.className = NULL,
        .core.number = Header_FieldNumber_Des,
        .core.hasIndex = 11,
        .core.offset = (uint32_t)offsetof(Header__storage_, des),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueEnum = Header_ChatMsgType_Single,
        .core.name = "chatMsgType",
        .core.dataTypeSpecific.enumDescFunc = Header_ChatMsgType_EnumDescriptor,
        .core.number = Header_FieldNumber_ChatMsgType,
        .core.hasIndex = 12,
        .core.offset = (uint32_t)offsetof(Header__storage_, chatMsgType),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueInt64 = 0LL,
        .core.name = "extType",
        .core.dataTypeSpecific.className = NULL,
        .core.number = Header_FieldNumber_ExtType,
        .core.hasIndex = 13,
        .core.offset = (uint32_t)offsetof(Header__storage_, extType),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .core.dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Header class]
                                     rootClass:[MsgHeaderRoot class]
                                          file:MsgHeaderRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(Header__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\n\001\007\000\003\017\000\004\n\000\005\006\000\006\n\000\010\007A\000\n\004A\000\013\n\000\r\013\000\016\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum Header_ClientType

GPBEnumDescriptor *Header_ClientType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Android\000Iphone\000Web\000";
    static const int32_t values[] = {
        Header_ClientType_Android,
        Header_ClientType_Iphone,
        Header_ClientType_Web,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Header_ClientType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Header_ClientType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Header_ClientType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Header_ClientType_Android:
    case Header_ClientType_Iphone:
    case Header_ClientType_Web:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Header_ChatMsgType

GPBEnumDescriptor *Header_ChatMsgType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Single\000Group\000";
    static const int32_t values[] = {
        Header_ChatMsgType_Single,
        Header_ChatMsgType_Group,
    };
    static const char *extraTextFormatInfo = "\002\000\006\000\001\005\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Header_ChatMsgType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Header_ChatMsgType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Header_ChatMsgType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Header_ChatMsgType_Single:
    case Header_ChatMsgType_Group:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
